COMMANDS

===============================================================
 kubectl config set-context [NAME | --current] [--cluster=cluster_nickname] [--user=user_nickname] [--namespace=namespace]
 kubectl config set-context --current --namespace=devenv #Example
 # Set the user field on the gce context entry without touching other values
  kubectl config set-context gce --user=cluster-admin

Pod:

k get pod
k get pod -w
k get pod -o wide
k run my-pod — image=nginx
k replace — force -f my-pod.yaml
k get pod pod1 -o jsonpath=’{.metadata.uid}’

Execute:
k exec -it pod2 — /bin/sh

Taint:
k taint node controlplane node-role.kubernetes.io/control-plane:NoSchedule
k taint node controlplane node-role.kubernetes.io/control-plane:NoSchedule-
kubectl taint nodes node1 key1=value1:NoSchedule

UnTaint:
kubectl taint nodes node1 key1=value1:NoSchedule- #just add an '-' after the taint command
Tolerate:

Deployments:
k create deployment dp1 — image nginx — replicas=2
k get deployment nginx-deployment
k get rs
k rollout status deployment nginx-deployment
k rollout history deployment nginx-deployment
k set image deployment.v1.apps/nginx-deployment nginx=nginx:1.16.1
k rollout history deployment nginx-deployment — revision=1

ConfigMap:
k get configmap
k create configmap cm1 — from-literal=db=oracle — from-literal=cert=sso

Drain:
k drain node01
k drain controlplane

Cluster:
kubeadm version
kubeadm upgrade plan

Backup and Restore:
ETCDCTL_API=3 etcdctl \
snapshot save snapshot.db \
- endpoints=https:127.0.0.1:2379 \
- cacert=/etc/etcd/ca.crt \
- cert=/etc/etcd/etcd-server.cert \
- key=/etc/etcd/etcd-server.key
service kube-apiserver stop
ETCDCTL_API=3 etcdctl snapshot restore snapshot.db — /data/dir /var/lib/etcd-from-backup
systemctl daemon-reload
service etcd restart
service kube-apiserver start

Roles:
k auth can-i create deployments
k auth can-i delete pods
k auth can-i delete pods — as dev-user

Security:

k get csr
k config -h
k config view
openssl x509 -in /etc/kubernetes/pki/ca.crt -text -noout
k certificate deny agent-smith
k delete csr agent-smith
k get csr akshay -o yaml
k config use-context dev-user@development
k config use-context research — kubeconfig /root/my-kube-config

! @ ! @ !! @ !! @ > >> eks
#####=============================================================

Create an EKS cluster and deploy 2048 game into that cluster
==================================================

Task 1: Create an EKS cluster
=============================
Name: <yourname>-eks-cluster-1
Use K8S version 1.25

Create an IAM role 'eks-cluster-role' with 1 policy attached: AmazonEKSClusterPolicy
Create another IAM role 'eks-node-grp-role' with 3 policies attached: 
(Allows EC2 instances to call AWS services on your behalf.)
    - AmazonEKSWorkerNodePolicy
    - AmazonEC2ContainerRegistryReadOnly
    - AmazonEKS_CNI_Policy

Choose default VPC, Choose 2 or 3 subnets
Choose a security group which open the ports 22, 80, 8080
cluster endpoint access: public

# For VPC CNI, CoreDNS and kube-proxy, choose the default versions, For CNI, latest and default are 
# different. But go with default.

Click 'Create'. This process will take 10-12 minutes. Wait till your cluster shows up as Active. 


Task 2: Add Node Groups to our cluster
======================================
Now, lets add the worker nodes where the pods can run

Open the cluster > Compute > Add NodeGrp
Name: <yourname>-eks-nodegrp-1 
Select the role you already created
Leave default values for everything else

AMI - choose the default 1 (Amazon Linux 2)
change desired/minimum/maximum to 1 (from 2)
Enable SSH access. Choose a security group which allwos 22, 80, 8080

Choose default values for other fields 

Node group creation may take 2-3 minutes


Task 3: Authenticate to this cluster
===================================
Reference:
https://docs.aws.amazon.com/eks/latest/userguide/create-kubeconfig.html

Open cloudshell

# Type on your AWS CLI window 
aws sts get-caller-identity
# observe your account and user id details

# Create a  kubeconfig file where it stores the credentials for EKS:
# kubeconfig configuration allows you to connect to your cluster using the kubectl command line.
aws eks update-kubeconfig --region region-code --name awxeksclus
ex: aws eks update-kubeconfig --region eu-west-1 --name awxeksclus # Use the cluster name you just 
created


# see if you can get the nodes you created
kubectl get nodes

# Install nano editor in cloudshell. We will need this in the next task
sudo yum install nano -y



Task 4: Create a new POD in EKS for the 2048 game
================================================

# clean up the files in cloudshell (Optional)
rm *.* 

# create the config file in YAML to deploy 2048 game pod into the cluster
nano 2048-pod.yaml

### code starts ###
apiVersion: v1
kind: Pod
metadata:
   name: 2048-pod
   labels:
      app: 2048-ws
spec:
   containers:
   - name: 2048-container
     image: blackicebird/2048
     ports:
       - containerPort: 80

### code ends ###


# apply the config file to create the pod
kubectl apply -f 2048-pod.yaml
#pod/2048-pod created

# view the newly created pod
kubectl get pods


Task 5: Setup Load Balancer Service
===================================
nano mygame-svc.yaml  

### code starts ###

apiVersion: v1
kind: Service
metadata:
   name: mygame-svc
spec:
   selector:
      app: 2048-ws
   ports:
   - protocol: TCP
     port: 80
     targetPort: 80
   type: LoadBalancer

### code ends ###

# apply the config file
kubectl apply -f mygame-svc.yaml

# view details of the modified service
kubectl describe svc mygame-svc

# Access the LoadBalancer Ingress on the kops instance
curl <LoadBalancer_Ingress>:<Port_number>
or
curl a06aa56b81f5741268daca84dca6b4f8-694631959.eu-west-1.elb.amazonaws.com:80
(try this from your laptop, not from your cloudshell)

# Go to EC2 console. get the DNS name of ELB and paste the DNS into address bar of the browser
# It will show the 2048 game. You can play. (need to wait for 2-3 minutes for the 
# setup to be complete)


Task 3: Cleanup
---------------
# Clean up all the resources created in the task
kubectl get pods
kubectl delete -f 2048-pod.yaml

kubectl get services
kubectl delete -f mygame-svc.yaml

# accessing containers in Pod
kubectl exec -it podname -n namespace -- /bin/bash
#example : kubectl exec -it redis -n awx -- /bin/bash



#helm
helm version
helm create firstchart
cd firstchart/
helm ls
helm install redis firstchart
helm repo add bitnami https://charts.bitnami.com/bitnami
helm search repo bitnami
helm install wordpress bitnami/wordpress
kubectl get svc --namespace default -w wordpress
helm ls
helm search hub wordpress
helm install happpry-panda bitnami/wordess
helm install bitnami/wordpress --generate-name

####################################################################

